import os
import cv2
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from sklearn.model_selection import train_test_split

# Define paths to your dataset
covid_path = 'COVID-19_Radiography_Dataset/COVID/images'
normal_path = 'COVID-19_Radiography_Dataset/Normal/images'

# Function to load and preprocess images
def load_and_preprocess_images(image_paths, label):
    images = []
    labels = []
    for image_path in image_paths:
        img = cv2.imread(image_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Ensure RGB format
        img = cv2.resize(img, (224, 224))  # Resize to input size of ResNet50
        img = tf.keras.applications.resnet.preprocess_input(img)  # Preprocess according to ResNet50 requirements
        images.append(img)
        labels.append(label)
    return images, labels

# Load COVID-19 images
covid_image_paths = [os.path.join(covid_path, filename) for filename in os.listdir(covid_path)]
covid_images, covid_labels = load_and_preprocess_images(covid_image_paths, 1)

# Load Normal images
normal_image_paths = [os.path.join(normal_path, filename) for filename in os.listdir(normal_path)]
normal_images, normal_labels = load_and_preprocess_images(normal_image_paths, 0)

# Combine COVID-19 and Normal data
all_images = covid_images + normal_images
all_labels = covid_labels + normal_labels

# Split data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(all_images, all_labels, test_size=0.25, random_state=42)

# Create a ResNet50 model with a custom output layer
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)
model = Model(inputs=base_model.input, outputs=predictions)

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(np.array(x_train), np.array(y_train), batch_size=32, epochs=5, validation_data=(np.array(x_test), np.array(y_test)))

# Plot training history (accuracy and loss)
plt.plot(history.history['accuracy'], label='train accuracy')
plt.plot(history.history['val_accuracy'], label='test accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='test loss')
plt.legend()
plt.show()
